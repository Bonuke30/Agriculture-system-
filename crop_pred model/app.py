# -*- coding: utf-8 -*-
"""Copy of crop_yield_pred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mZG9IFzIKOdw8xWQSSyTKctZ-_TId91Z

**Importing modules**

---
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
#from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
l1=LabelEncoder()
import seaborn as sns

"""**Data Processing**

---


"""

data1= pd.read_csv("https://raw.githubusercontent.com/Kirti-kn/AgroInOne/master/crop_pred%20model/APY.csv")
data2= pd.read_csv("https://raw.githubusercontent.com/Kirti-kn/AgroInOne/master/crop_pred%20model/APY.csv")

data1.head(10)

print(data1.columns)

"""**Checking Null Columns**

---


"""

data1.isnull().sum()

"""**Filling Null columns with the average/mean**

---


"""

mn=round(data1["Production"].mean(),2)
data1["Production"].fillna(mn,inplace=True)
data1["Crop"].fillna("Wheat",inplace=True)
data2["Production"].fillna(mn,inplace=True)
data2["Crop"].fillna("Wheat",inplace=True)

data1.isnull().any()

data2.head()

corr = data1.corrwith(data1['Yield'])
corr

# need to remove area, crop_year

data1.drop(['Crop_Year','Area '],inplace=True,axis=1)
data2.drop(['Crop_Year','Area '],inplace=True,axis=1)

"""**Assigning Numerical Values using label encoder**

---


"""

data1["State"]=l1.fit_transform(data1["State"])
data1["District "]=l1.fit_transform(data1["District "])
data1["Crop"]=l1.fit_transform(data1["Crop"])
data1["Season"]=l1.fit_transform(data1["Season"])

corr = data1.corrwith(data1['Yield'])
corr

data1.drop('State',axis=1,inplace=True)
data2.drop('State',axis=1,inplace=True)

"""**Separating label and features**

---


"""

x = data1.drop("Yield", axis=1)
y = data1["Yield"]

"""**Splitting training(80%) and testing(20%) dataset**

---


"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=50)

"""**Importing model: RandomeForets Regressor**

---


"""

rf_model = RandomForestRegressor(n_estimators=100, random_state=50)

"""**Training the Model**

---


"""

rf_model.fit(x_train, y_train)

"""**Testing**

---


"""

y_pred = rf_model.predict(x_test)

"""**Finding MAE**

---


"""

mae=mean_absolute_error(y_test,y_pred)
print(mae)

"""**dictionary for columns containing values as their key and corresponding numerical value as their values.**

---


"""

state_dict ={}
district_dict={}
crop_dict={}
season_dict={}

# for i,j in zip(data1['State'],data2['State']):
#   state_dict[j]=i

for i,j in zip(data1['District '],data2['District ']):
  district_dict[j]=i

for i,j in zip(data1['Crop'],data2['Crop']):
  crop_dict[j]=i

for i,j in zip(data1['Season'],data2['Season']):
  season_dict[j]=i

print(state_dict)
print(district_dict)
print(crop_dict)
print(season_dict)

"""**Accuracy**

---


"""

accuracy_percentage = 100 - mae / np.mean(y_test) * 100
print('Accuracy percentage: %.2f%%' % accuracy_percentage)

"""**Final Model**

---


"""

final_model=rf_model